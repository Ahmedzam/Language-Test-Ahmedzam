{{!
/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
}}

package {{package}};
import {{invokerPackage}}.ApiException;
import com.ibm.watson.app.common.util.rest.JSONResponseHandler;
import java.util.*;

{{#imports}}import {{import}};
{{/imports}}

import org.apache.http.client.protocol.HttpClientContext;
import com.google.inject.Inject;
import java.util.Map;
import java.util.HashMap;

{{#operations}}
public class {{classname}}Client extends AbstractClientApi {

  @Inject
  public {{classname}}Client(  HttpClientContext hc  ) {
  	super(hc);
  }

  {{#operation}}
  {{#errorList}} //error info- code: {{code}} reason: "{{reason}}" model: {{#responseModel}}{{responseModel}}
  {{/responseModel}}{{^responseModel}}<none>
  {{/responseModel}}
  {{/errorList}}  
  
  public {{#returnType}}{{{returnType}}}{{#isListContainer}}[]{{/isListContainer}} {{/returnType}}{{^returnType}}void {{/returnType}}{{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}} 
  		JSONResponseHandler<{{#returnType}}{{{returnType}}}{{#isListContainer}}[]{{/isListContainer}}{{/returnType}}{{^returnType}}Void{{/returnType}}> handler  ) throws ApiException {
    Object postBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#requiredParamCount}}
    // verify required params are set
    if({{/requiredParamCount}}{{#requiredParams}} {{paramName}} == null {{#hasMore}}|| {{/hasMore}}{{/requiredParams}}{{#requiredParamCount}}) {
       throw new ApiException(400, "missing required params");
    }
    {{/requiredParamCount}}

    // create path and map variables
    String path = "{{baseName}}{{path}}".replaceAll("\\{format\\}","json"){{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", escapeString({{{paramName}}}.toString())){{/pathParams}};

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();

    {{#queryParams}}if(!"null".equals(String.valueOf({{paramName}})))
      queryParams.put("{{baseName}}", String.valueOf({{paramName}}));
    {{/queryParams}}
    {{#headerParams}}headerParams.put("{{baseName}}", {{paramName}});
    {{/headerParams}}
    
    String[] contentTypes = {
      {{#consumes}}"{{mediaType}}",{{/consumes}}"application/json"
    };
    String contentType = contentTypes[0];
    {{#returnType}}return  {{/returnType}}invoke{{httpMethod}}(path, queryParams, postBody, headerParams, contentType, handler);
  }
  {{/operation}}
}
{{/operations}}
