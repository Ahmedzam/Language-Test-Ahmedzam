{{!
/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
}}

package {{apiPackage}};

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.ibm.deepqa.legal.Copyright;
import com.ibm.watson.app.common.util.rest.JSONResponseHandler;
import {{apiPackage}}.ApiException;


@Copyright(Copyright.IBM_COPYRIGHT)
public abstract class AbstractClientApi {

   private static final Logger logger = LogManager.getLogger();
   
   private static final Gson gson = new GsonBuilder()
      .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
      .create();

   
   static CloseableHttpClient defaultHttpClient = HttpClients.createDefault();

   static String basePath;

   static public String getBasePath() {
      return basePath;
   }

   static public void setBasePath( String p_basePath ) {
      basePath = p_basePath;
   }

   static public CloseableHttpClient getDefaultHttpClient() {
      return defaultHttpClient;
   }

   static public void setDefaultHttpClient( CloseableHttpClient p_httpClient ) {
      defaultHttpClient = p_httpClient;
   }

   CloseableHttpClient httpClient;
   HttpClientContext   httpContext;

   AbstractClientApi( HttpClientContext hc ) {
   		httpContext = hc;
   		httpClient = defaultHttpClient;
   }
   
   public <T> T invokeGET(String path, Map<String, String> queryParams, Object body, Map<String, String> headerParams, String contentType, JSONResponseHandler<T> handler) throws ApiException {
      HttpGet req = new HttpGet( getRequestURL(basePath + path, queryParams ) );
      return invoke( req, headerParams, handler );
   }   
   
   public <T> T invokePOST(String path, Map<String, String> queryParams, Object body, Map<String, String> headerParams, String contentType, JSONResponseHandler<T> handler) throws ApiException {
      HttpPost req = new HttpPost( basePath + path );
      req.setEntity( getEntity(body, contentType) );
      return invoke( req, headerParams, handler );
   }   
   
   public <T> T invokePUT(String path, Map<String, String> queryParams, Object body, Map<String, String> headerParams, String contentType, JSONResponseHandler<T> handler) throws ApiException {
      HttpPut req = new HttpPut( basePath + path );
      req.setEntity( getEntity(body, contentType) );
      return invoke( req, headerParams, handler );
   }   
   public <T> T invokeDELETE(String path, Map<String, String> queryParams, Object body, Map<String, String> headerParams, String contentType, JSONResponseHandler<T> handler) throws ApiException {
      HttpDelete req = new HttpDelete( getRequestURL(basePath + path, queryParams ) );
      return invoke( req, headerParams, handler );
   }   

   protected HttpEntity getEntity( Object body, String contentType ) throws ApiException {
      HttpEntity entity = null;
      if ( body != null) {
         try {
            if ( contentType != null && contentType.equals("text/plain") && body instanceof String) {
               entity = new StringEntity( (String)body );
            } else { 
               entity = new StringEntity( gson.toJson(body) );
            }
            ((StringEntity)entity).setContentType(contentType);
         } catch (Exception e ) {
            throw new ApiException( 500, e.getMessage() );
         }
      }
      return entity;
   }
   
   protected <T> T invoke( HttpRequestBase req, Map<String, String> headerParams, JSONResponseHandler<T> handler) throws ApiException {
      
      if( req != null )  {
         if ( headerParams != null && !headerParams.isEmpty() ) {
            for( Map.Entry<String, String> entry : headerParams.entrySet() ) {
               req.addHeader(entry.getKey(), entry.getValue());
            }
         }
         
         try {
            return httpClient.execute(req, handler, httpContext );
         } catch ( Exception e ) {
            throw new ApiException(500, e.getMessage());
         }
      }
      return null;
   }   
   
   String getRequestURL( String path,  Map<String, String>queryParams) {
      if ( queryParams == null || queryParams.isEmpty() ) {
         return path; 
      }
      try {
         URIBuilder b = new URIBuilder(path);
         for( Map.Entry<String, String> entry : queryParams.entrySet() ) {
            b = b.addParameter(entry.getKey(), entry.getValue());
         }
         return b.build().toASCIIString();
      } catch (Exception e) {
         return path;
      }
   }
   
   String escapeString( String str ) {
      try{
         return URLEncoder.encode(str, "utf8").replaceAll("\\+", "%20");
       }
       catch(UnsupportedEncodingException e) {
         return str;
       }
   }

   public HttpClientContext getHttpContext() {
      return httpContext;
   }

   public void setHttpContext( HttpClientContext httpContext ) {
      this.httpContext = httpContext;
   }
   
   public CloseableHttpClient getHttpClient() {
      return httpClient;
   }

   public void setHttpClient( CloseableHttpClient p_httpClient ) {
      httpClient = p_httpClient;
   }

   
   
   
}
